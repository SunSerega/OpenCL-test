name: Pack and test

# Controls when the workflow will run
on:
  push:
    branches-ignore:
      - 'pack-changes/*'
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  
permissions:
  contents: write

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: apt-gen update
        run: |
          sudo apt-get update
        
      - name: Download Pascal Compiler
        run: |
        
          curl -O https://pascalabc.net/downloads/PABCNETC.zip
          file -i PABCNETC.zip
          
          #sudo apt-get install -y p7zip-full
          #7z -scsWIN -sccWIN x PABCNETC.zip -oPABCNETC
          
          #unzip -j PABCNETC.zip -d PABCNETC
          
          sudo apt-get install -y minizip
          mkdir PABCNETC
          miniunzip PABCNETC.zip -d PABCNETC
          
          rm PABCNETC.zip
          
      - name: Install Mono
        run: |
          sudo apt-get install -y mono-complete

      - name: Install OpenCL Drivers
        run: |
        
          sudo apt-get install -y ocl-icd-opencl-dev
          
          # Install drivers for AMD GPUs
          #sudo apt-get install -y mesa-opencl-icd
          
          # Install drivers for Nvidia GPUs
          #sudo apt-get install -y nvidia-opencl-dev
          
          # Install drivers for Intel GPUs
          #sudo apt-get install -y intel-opencl-icd
          
          # Install drivers for Imagination Technologies PowerVR GPUs
          sudo apt-get install -y libpocl-dev
          
      - name: Build and run OpenCL program
        run: |
        
          #mono "PABCNETC/pabcnetcclear.exe" "./test OpenCL.pas"
          mono "./test OpenCL.exe"
      
      - name: Check for changes
        run: |
        
          rm -rf PABCNETC
          
          if git diff --quiet; then
            echo "No changes detected"
          else
            echo "Changes detected"
            git checkout -B "pack-changes/$(git rev-parse --abbrev-ref HEAD)"
            
            git add -A
            git config --global user.name 'pack bot'
            git config --global user.email 'sunserega2@gmail.com'
            git commit -m "changes"
            git push -f --set-upstream origin "$(git rev-parse --abbrev-ref HEAD)"
            
          fi
  
  generate-release:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Generate release files
        run: |
        
          mkdir Release
          copy "test OpenCL.exe" "Release/test OpenCL.exe"
          copy "test otp.txt" "Release/test otp.txt"
          # _GenerateAllSetups.bat
          
      - name: Delete old Github Release
        uses: actions/github-script@v6
        with:
          script: |
          
            const { repo: { owner, repo }, sha } = context;
            console.log({ owner, repo, sha });
            
            const tag = "unstable";
            
            // Check if the release already exists
            const existingReleases = await github.rest.repos.listReleases({ owner, repo });
            for (const existingRelease of existingReleases.data) {
              if (existingRelease.tag_name === tag) {
                console.log('deleing old release', { existingRelease });
                await github.rest.repos.deleteRelease({
                  owner,
                  repo,
                  release_id: existingRelease.id,
                });
                break;
              }
            }
            
      - name: Delete old release tag
        run: |
        
          git push --delete origin unstable || true
          
      - name: Create Github Release
        uses: actions/github-script@v6
        with:
          script: |
          
            console.log('environment', process.versions);
            
            const fs = require('fs').promises;
            
            const { repo: { owner, repo }, sha } = context;
            console.log({ owner, repo, sha });
            
            const tag = "unstable";
            
            //console.log({ api: github.rest.repos });
            
            
            const release = await github.rest.repos.createRelease({
              owner, repo,
              tag_name: tag,
              name: "Unstable build",
              draft: false,
              prerelease: true,
              target_commitish: sha
            });
            
            console.log('created release', { release });
            
            for (let file of await fs.readdir('Release')) {
              // do whatever filtering you want here, I'm just uploading all the files
              console.log('uploading', file);
              
              await github.rest.repos.uploadReleaseAsset({
                owner, repo,
                release_id: release.data.id,
                name: file,
                data: await fs.readFile(`./Release/${file}`)
              });
              
            }
#        id: create_release
#        uses: actions/create-release@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          tag_name: unstable
#          release_name: Unstable build
#          body: |
#            This is an unstable build generated automatically.
#          draft: false
#          prerelease: true
#        
#      - name: Upload Release Assets
#        id: upload-release-assets
#        uses: actions/upload-release-asset@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          upload_url: ${{ steps.create_release.outputs.upload_url }}
#          asset_path: ./Release/
#          asset_name: *