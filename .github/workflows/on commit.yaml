name: Pack and test

# Controls when the workflow will run
on:
  push:
    branches-ignore:
      - 'pack-changes/*'
  pull_request:
  
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

permissions:
  contents: write

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: apt-gen update
        run: |
          sudo apt-get update
        
      - name: Download Pascal Compiler
        run: |
        
          curl -L -O https://github.com/SunSerega/pascalabcnet/releases/download/unstable/PABCNETC.zip
          file -i PABCNETC.zip
          
          #sudo apt-get install -y p7zip-full
          #7z -scsWIN -sccWIN x PABCNETC.zip -oPABCNETC
          
          #unzip -j PABCNETC.zip -d PABCNETC
          
          sudo apt-get install -y minizip
          mkdir PABCNETC
          miniunzip PABCNETC.zip -d PABCNETC
          
          rm PABCNETC.zip
          
      - name: Install Mono
        run: |
          sudo apt-get install -y mono-complete
          sudo apt-get install -y gdb lldb

      - name: Install OpenCL Drivers
        run: |
        
          sudo apt-get install -y ocl-icd-opencl-dev
          
          # Install drivers for AMD GPUs
          #sudo apt-get install -y mesa-opencl-icd
          
          # Install drivers for Nvidia GPUs
          #sudo apt-get install -y nvidia-opencl-dev
          
          # Install drivers for Intel GPUs
          #sudo apt-get install -y intel-opencl-icd
          
          # Install drivers for Imagination Technologies PowerVR GPUs
          sudo apt-get install -y libpocl-dev
          
      - name: Build and run OpenCL program
        run: |
        
          mono "PABCNETC/pabcnetcclear.exe" "./test OpenCL.pas"
          mono "./test OpenCL.exe"
          rm -rf PABCNETC
          
      - name: Check for changes
        run: |
        
          if git push origin --delete "pack-changes/$(git rev-parse --abbrev-ref HEAD)" &> /dev/null; then
            echo "Old changes branch deleted"
          else
            echo "Old changes branch not found"
          fi
          
          if git diff --quiet; then
            echo "No changes detected"
          else
            echo "Changes detected"
            git checkout -B "pack-changes/$(git rev-parse --abbrev-ref HEAD)"
            
            git add -A
            git config --global user.name 'pack bot'
            git config --global user.email 'sunserega2@gmail.com'
            git commit -m "changes"
            git push -f --set-upstream origin "$(git rev-parse --abbrev-ref HEAD)"
            
          fi
  
      - name: Generate release files
        run: |
        
          mkdir Release
          cp "test OpenCL.exe" "Release/test OpenCL.exe"
          cp "test otp.txt" "Release/test otp.txt"
          
      - name: Create Github Release
        uses: actions/github-script@v6
        with:
          script: |
          
            console.log('environment', process.versions);
            
            const { repo: { owner, repo }, sha } = context;
            console.log({ owner, repo, sha });
            
            const tag = "unstable";
            
            // Check if the release already exists
            const existingReleases = await github.rest.repos.listReleases({ owner, repo });
            for (const existingRelease of existingReleases.data) {
              if (existingRelease.tag_name === tag) {
                console.log('deleing old release', { existingRelease });
                await github.rest.repos.deleteRelease({
                  owner,
                  repo,
                  release_id: existingRelease.id,
                });
                break;
              }
            }
            
            try {
              await github.rest.git.deleteRef({
                owner: owner,
                repo: repo,
                ref: 'tags/unstable'
              });
              console.log('Tag deleted successfully');
            } catch (error) {
              console.error(`Error deleting tag: ${error}`);
            }
          
            const fs = require('fs').promises;
            
            const release = await github.rest.repos.createRelease({
              owner, repo,
              tag_name: tag,
              name: "Unstable build",
              draft: true,
              prerelease: true,
              target_commitish: sha
            });
            
            console.log('created release', { release });
            
            for (let file of await fs.readdir('Release')) {
              console.log('uploading', file);
              
              try {
                await github.rest.repos.uploadReleaseAsset({
                  owner, repo,
                  release_id: release.data.id,
                  name: file,
                  data: await fs.readFile(`./Release/${file}`)
                });
              } catch (error) {
                console.error(`Error uploading: ${error}`);
              }
              
            }
            
            if (release.data.draft) {
              console.log('finalizing draft release');
              await github.rest.repos.updateRelease({
                owner,
                repo,
                release_id: release.data.id,
                draft: false,
              });
            }
  